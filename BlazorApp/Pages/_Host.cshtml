@page "/"
@namespace BlazorApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BlazorApp</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="Server" />
    </app>

    <!-- Start Single Page Apps for GitHub Pages -->
    <script type="text/javascript">
        // Single Page Apps for GitHub Pages
        // https://github.com/rafrex/spa-github-pages
        // Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License
        // ----------------------------------------------------------------------
        // This script checks to see if a redirect is present in the query string
        // and converts it back into the correct url and adds it to the
        // browser's history using window.history.replaceState(...),
        // which won't cause the browser to attempt to load the new url.
        // When the single page app is loaded further down in this file,
        // the correct url will be waiting in the browser's history for
        // the single page app to route accordingly.
        (function (l) {
            if (l.search) {
                var q = {};
                l.search.slice(1).split('&').forEach(function (v) {
                    var a = v.split('=');
                    q[a[0]] = a.slice(1).join('=').replace(/~and~/g, '&');
                });
                if (q.p !== undefined) {
                    window.history.replaceState(null, null,
                        l.pathname.slice(0, -1) + (q.p || '') +
                        (q.q ? ('?' + q.q) : '') +
                        l.hash
                    );
                }
            }
        }(window.location))
    </script>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/Blazor.Extensions.Canvas/blazor.extensions.canvas.js"></script>

    <script type="text/javascript">
        var canRender = true;
        var counter = 0;
        var fps;

        window.anim = {
            start: async function (instance, uniformlocation) {
                setInterval(function () {
                    canRender = true;
                }, 16);

                setInterval(function () { // FPS counter shit
                    fps = counter;
                    console.log(fps);
                    counter = 0;
                }, 1000);
                return await window.requestAnimationFrame(async function (timestamp) { await anim.callback(instance, uniformlocation); });
            },
            callback: async function (instance, uniformlocation) {
                console.log('test');
                if (canRender) {
                    await instance.invokeMethodAsync('eventRequestAnimationFrame', performance.now(), uniformlocation);
                    counter++;
                    canRender = false;
                }
                var callbackId = await window.requestAnimationFrame(async function (timestamp) { await anim.callback(instance, uniformlocation); });
            },

            loadTexture: function (filename) {
                canvas = document.querySelector("#editorCanvasContainer>canvas")
                var gl = canvas.getContext("webgl");

                var image = new Image();
                image.src = filename;
                image.addEventListener('load', function () {
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
                });
            },

            loadTextResource: function (url, callback) {
                var request = new XMLHttpRequest();
                request.open('GET', url + '?dont-cache=' + Math.random(), true);
                request.onload = function () {
                    if (request.status < 200 || request.status > 299) {
                        callback('Error: HTTP status ' + request.status + ' on resource' + url);
                    } else {
                        callback(null, request.responseText);
                    }
                };
                request.send();
            },

            loadJSONResource: function (url, callback) {
                loadTextResource(url, function (result) {
                    try {
                        callback(null, JSON.parse(result));
                    } catch (e) {
                        callback(e);
                    }
                });
            }
        };
    </script>
</body>
</html>
